{"version":3,"sources":["utils/afterAnimationEnd.js","components/HeartBeat/beat.js","components/HeartBeat/ChartManager.js","components/HeartBeat/index.jsx","components/TapTap/index.jsx","components/Timer/index.jsx","components/FadeText/index.jsx","utils/afterTransitionEnd.js","components/Modal/index.jsx","app/CPR/Workers/Messenger.js","app/CPR/View/Components/Confirm.jsx","app/CPR/View/Components/Success.jsx","app/CPR/View/Components/Airway.jsx","app/CPR/View/Components/PushIntro.jsx","app/CPR/View/Hooks/useModal.jsx","app/CPR/View/Components/StatusUI.jsx","app/CPR/View/Components/Intro.jsx","app/CPR/Workers/UI.js","app/CPR/Actors/Patient.js","app/CPR/Actors/Angel.js","app/CPR/Workers/Scenery.js","app/CPR/Workers/Screen.js","app/CPR/Workers/Photographer.js","app/CPR/Workers/Light.js","app/CPR/Workers/Loader.js","app/CPR/Workers/Util.js","utils/getScreenCoords.js","app/CPR/Director/ChiefDirector.js","app/CPR/View/index.jsx"],"names":["afterAnimationEnd","elem","anmTime","a","Reflect","has","Promise","resolve","addEventListener","onAnmEnd","removeEventListener","setTimeout","normalBeats","generateBeats","index","round","value","stamp","times","result","lastBeat","beat","randomVal","Math","random","nextBeat","push","time","MODE","NORMAL","RIP","ChartManager","container","initChart","createChart","configChart","startBeat","hasInited","beatIndex","stopBeat","pastTime","pageTime","beats","chart","prepareData","anmStartTime","targetIndex","floor","offset","nextBeatPhase","shift","changeData","requestAnimationFrame","mode","baseIndex","setMode","console","log","F2","Chart","el","pixelRatio","window","devicePixelRatio","animate","padding","source","type","mask","range","tickCount","min","max","tooltip","axis","line","color","position","shape","render","this","BEAT_ROUND","forwardRef","props","ref","containerRef","useRef","managerRef","useImperativeHandle","current","useEffect","manager","className","visibility","fRef","speed","onTap","onMiss","requirement","useState","running","setRunning","visible","setVisible","imgRef","togglePlay","show","hide","style","display","WebkitAnimationPlayState","animationPlayState","animationDuration","src","alt","PART_NUM","onClick","matixStr","document","defaultView","getComputedStyle","transform","test","percent","abs","Number","RegExp","$1","screen","width","accuracy","timeRef","h","m","s","setTime","start","Date","now","timer","setInterval","pastSecs","end","clearInterval","getTime","reset","formatNum","num","String","padStart","texts","begin","setBegin","lastItemRef","play","length","map","text","isLastItem","undefined","key","animationDelay","duration","onEnd","Modal","detachFromDOM","remove","createElement","parentElement","body","appendChild","classList","add","afterTransitionEnd","then","createPortal","onBgClick","children","MESSAGES","Messenger","send","message","content","callbacks","get","callback","listen","set","mute","filter","func","Map","Confirm","onConfirm","Success","Airway","PushIntro","useModal","setVisibility","heartBeatVisibility","setHeartBeatVisibility","btnText","setBtnText","confirmVisiblity","showConfirm","hideConfirm","pushVisibility","showPush","hidePush","airwayVisibility","showAirway","hideAirway","successVisibility","showSuccess","hideSuccess","heartBeatRef","timerRef","tapRef","playHeartBeat","setHeartBeatMode","startTimer","showTap","hideTap","toggleTap","onMount","showPushIntro","showAirwayIntro","HeartBeat","Timer","TapTap","onBtnPress","TEXTS","onStart","textRef","introRef","zoom","setZoom","showBtn","setShowBtn","progress","setProgress","zoomOut","playText","showStartButton","startBtnText","startBtnClicked","FadeText","UI","messenger","showIntro","ReactDOM","unmountComponentAtNode","Intro","zoomOutIntro","updateIntroProgress","showStatusUI","StatusUI","statusRef","playHeartAttack","confirmHeartAttack","startTap","tapProcess","stopTap","pushTimes","waitBtn","btnProcess","createRef","Patient","receiveModel","model","geometry","getGeometry","scene","ready","traverse","object","isMesh","castShadow","material","skinning","standby","scale","rotation","PI","takeoff","name","anmFaint","getScreenCoords","util","mixer","update","frameTime","Angel","lift","press","THREE","isAnmPushing","showPushHand","hidePushHand","showLiftHand","hideLiftHand","showPressHand","hidePressHand","Object","values","receivePushModel","data","mesh","timeOffset","z","Scenery","background","getScene","receiveSkyTexture","texture","skyTexture","createBackground","skyPlane","sky","rotateX","createFloor","planeGeometry","planeMaterial","depthWrite","plane","receiveShadow","buildScene","meshes","Screen","canvas","renderer","setPixelRatio","setSize","innerWidth","innerHeight","toneMapping","toneMappingExposure","outputEncoding","shadowMap","enabled","camera","startTime","lastFrameTime","Photographer","focusBody","enableUserControl","control","OrbitControls","enablePan","enableZoom","getCamera","target","focusChest","focusHead","Light","lights","amLight","dirLight","multiplyScalar","d","shadow","mapSize","height","left","right","top","bottom","far","getLights","PATH","Loader","onComplete","onProgress","fileName","total","onError","loadGLTF","path","dracoLoader","useDraco","loader","GLTFLoader","DRACOLoader","setDecoderPath","setDecoderConfig","preload","setDRACOLoader","load","loadTexture","loadFBX","FBXLoader","loadResources","patient","Util","vec","clone","project","availWidth","availHeight","x","y","ChiefDirector","scenery","photographer","light","onMessage","action","angel","cpr","UIManager","UIRef","canvasRef","director"],"mappings":"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","file":"static/js/6.42c1ef7f.chunk.js","sourcesContent":["export default async function afterAnimationEnd(elem, anmTime) {\n    if (elem) {\n        if (Reflect.has(elem, \"onanimationend\")) {\n            return new Promise((resolve) => {\n                const onAnmEnd = () => {\n                    elem.removeEventListener(\"animationend\", onAnmEnd);\n                    resolve(true);\n                };\n                elem.addEventListener(\"animationend\", onAnmEnd);\n            });\n        } else {\n            return new Promise((resolve) => {\n                setTimeout(resolve, anmTime);\n            });\n        }\n    }\n    return false;\n}\n","const normalBeats = [\n    10, 10, 10,     10, 10, 10,     10, 10, 10,     10, 10, 10,     10, 10, 10,\n    10.2, 10.75, 11.5,    12.25, 13, 12.25,   11.5, 10.75, 10,    10, 10, 10,     10, 9, 8,\n    12, 17, 22,   11, 6, 8,   10,10,10,    10,10,10,    10, 10.33, 10.66,\n    11,11.42,11.85,   12.28,12.71,13.14,     13.57,14,13.5,    13,12.5,12,  11.5,11,10.5,\n    10,10.5,11,     11.5,12,11.6,      11.2, 10.8,10.4,     10,10,10,   10,10,10\n];\n\nfunction generateBeats ({index = 0, round =1, value}){\n    let stamp = index;\n    let times = round;\n    const result = [];\n    while(times-- > 0){\n        let lastBeat = 0;\n        for(const beat of normalBeats){\n            let randomVal = 0;\n            if(lastBeat){   \n                randomVal = Math.random() * (lastBeat-beat);\n            }\n            let nextBeat = beat + randomVal;\n            result.push({\n                time: stamp++,\n                value: value || nextBeat\n            })\n            lastBeat = beat;\n\n        }\n    }\n    return result;\n}\n\n\nexport { generateBeats }","import F2 from \"@antv/f2\";\nimport { generateBeats } from \"./beat\";\n\nconst BEAT_ROUND = 75;\nexport const MODE = {\n    NORMAL: 1,\n    RIP: 2,\n};\n\nexport default class ChartManager {\n    constructor(container) {\n        this.container = container;\n        this.beats = generateBeats({ index: 0, round: 3, value: 10 });\n        this.beatIndex = 0;\n        this.baseIndex = BEAT_ROUND * 3;\n        this.nextBeatPhase = [];\n        this.mode = MODE.NORMAL;\n        this.hasInited = false;\n    }\n\n    initChart = () => {\n        const { createChart, configChart } = this;\n        createChart();\n        configChart();\n    };\n\n    startBeat = () => {\n        if (!this.hasInited) {\n            this.initChart();\n        }\n        if (this.beatIndex) {\n            return;\n        }\n        this.beat();\n    };\n\n    stopBeat = () => {};\n\n    beat = (pageTime = 0) => {\n        const { beats, chart, prepareData } = this;\n        let pastTime;\n        if (!this.anmStartTime) {\n            this.anmStartTime = pageTime;\n            pastTime = 0;\n        } else {\n            pastTime = pageTime - (this.anmStartTime || 0);\n        }\n        const targetIndex = Math.floor((pastTime / (60000 / 80)) * BEAT_ROUND);\n        while (this.beatIndex <= targetIndex) {\n            const offset = this.beatIndex % BEAT_ROUND;\n            // prepare data for next round\n            if (offset === 0) {\n                prepareData();\n            }\n            const nextBeat = this.nextBeatPhase[offset];\n            beats.shift();\n            beats.push(nextBeat);\n            this.beatIndex++;\n        }\n        chart.changeData(beats);\n        requestAnimationFrame(this.beat);\n    };\n\n    prepareData = () => {\n        switch (this.mode) {\n            case MODE.RIP:\n                this.nextBeatPhase = generateBeats({ index: this.beatIndex + this.baseIndex, value: 10 });\n                break;\n            case MODE.NORMAL:\n            default:\n                this.nextBeatPhase = generateBeats({\n                    index: this.beatIndex + this.baseIndex,\n                    round: 1,\n                });\n                break;\n        }\n    };\n\n    setMode = (mode) => {\n        console.log('ddd', mode);\n        this.mode = mode;\n    };\n\n    createChart = () => {\n        const chart = new F2.Chart({\n            el: this.container,\n            pixelRatio: window.devicePixelRatio,\n            animate: false,\n            padding: 0,\n        });\n        this.chart = chart;\n    };\n\n    configChart = () => {\n        const { chart, beats } = this;\n        const defs = {\n            time: {\n                type: \"timeCat\",\n                mask: \"HH:mm:ss\",\n                range: [0, 1],\n            },\n            value: {\n                tickCount: 2,\n                min: 4,\n                max: 24,\n            },\n        };\n        chart.source(beats, defs);\n        chart.tooltip(false);\n        chart.axis(false);\n        chart.line().color(\"#d21818\").position(\"time*value\").shape(\"smooth\");\n        chart.render();\n    };\n}\n","import React, { useEffect, useRef, useImperativeHandle, forwardRef } from \"react\";\nimport ChartManager from \"./ChartManager\";\n\nexport { MODE } from \"./ChartManager\";\nexport default forwardRef((props, ref) => {\n    const containerRef = useRef();\n    const managerRef = useRef();\n\n    useImperativeHandle(ref, () => ({\n        setMode: (mode) => managerRef.current.setMode(mode),\n        beat: () => managerRef.current.startBeat(),\n    }));\n\n    useEffect(() => {\n        const manager = new ChartManager(containerRef.current);\n        managerRef.current = manager;\n\n        return () => {\n            manager.stopBeat();\n        };\n    }, []);\n\n    return <canvas className={`heartbeat ${props.visibility ? \"\" : \"hidden\"}`} ref={containerRef}></canvas>;\n});\n","import React, { forwardRef, useImperativeHandle, useState, useRef } from \"react\";\nimport \"./style.scss\";\n\nconst PART_NUM = 4;\n\nexport default forwardRef(({ speed = 120, onTap, onMiss, requirement = 0 }, fRef) => {\n    const [running, setRunning] = useState(false);\n    const [visible, setVisible] = useState(false);\n    const imgRef = useRef();\n    const togglePlay = () => {\n        setRunning(!running);\n    };\n\n    const show = () => setVisible(true);\n    const hide = () => setVisible(false);\n\n    const onTapPress = () => {\n        const matixStr = document.defaultView.getComputedStyle(imgRef.current, null).transform;\n        if (matixStr && onTap) {\n            if (/^matrix\\(.+, .+, .+, .+, (.+), .+\\)$/.test(matixStr)) {\n                const percent = Math.abs(Number(RegExp.$1)) / (window.screen.width / PART_NUM);\n                const accuracy = 1 - Math.abs(percent - 0.5) * 2;\n                if (accuracy >= requirement) {\n                    onTap(accuracy);\n                } else {\n                    onMiss && onMiss(accuracy);\n                }\n            }\n        }\n    };\n\n    useImperativeHandle(fRef, () => ({\n        togglePlay,\n        show,\n        hide,\n    }));\n\n    return (\n        <div className='taptap' style={{ display: visible ? \"block\" : \"none\" }}>\n            <img\n                ref={imgRef}\n                style={{\n                    WebkitAnimationPlayState: running ? \"running\" : \"paused\",\n                    animationPlayState: running ? \"running\" : \"paused\",\n                    animationDuration: `${60 / speed}s`,\n                }}\n                src='/images/tap/scroll.png'\n                alt='bg'\n            />\n            <div\n                className='cover'\n                style={{\n                    WebkitAnimationPlayState: running ? \"running\" : \"paused\",\n                    animationPlayState: running ? \"running\" : \"paused\",\n                    animationDuration: `${(PART_NUM * 60) / speed}s`,\n                }}></div>\n            <div\n                className='block'\n                style={{\n                    WebkitAnimationPlayState: running ? \"running\" : \"paused\",\n                    animationPlayState: running ? \"running\" : \"paused\",\n                    animationDuration: `${(PART_NUM * 60) / speed}s`,\n                }}></div>\n            <div className='tap' onClick={onTapPress}>\n                按压\n            </div>\n        </div>\n    );\n});\n","import React, { useRef, useState, forwardRef, useImperativeHandle, useEffect } from \"react\";\n\nexport default forwardRef((props, ref) => {\n    const timeRef = useRef({});\n    const [time, setTime] = useState({\n        h: 0,\n        m: 0,\n        s: 0,\n    });\n\n    const start = () => {\n        timeRef.current.start = Date.now();\n        timeRef.current.timer = setInterval(() => {\n            const pastSecs = Math.floor((Date.now() - timeRef.current.start) / 1000);\n            const h = Math.floor(pastSecs / 3600);\n            const m = Math.floor((pastSecs % 3600) / 60);\n            const s = pastSecs % 60;\n            setTime({\n                h,\n                m,\n                s,\n            });\n        }, 1000);\n    };\n\n    const end = () => {\n        clearInterval(timeRef.current.timer);\n        timeRef.current.timer = 0;\n    };\n\n    const getTime = () => {\n        return time;\n    };\n\n    const reset = () => {\n        end();\n        setTime({\n            h: 0,\n            m: 0,\n            s: 0,\n        });\n    };\n    const formatNum = (num) => String(num).padStart(2, \"0\");\n\n    useImperativeHandle(ref, () => {\n        return { start, end, getTime, reset };\n    });\n    useEffect(() => end, []);\n\n    return (\n        <p className='timer'>\n            <span>{formatNum(time.h)}</span>:<span>{formatNum(time.m)}</span>:<span>{formatNum(time.s)}</span>\n        </p>\n    );\n});\n","import React, { useState, useRef, forwardRef, useImperativeHandle } from \"react\";\nimport afterAnimationEnd from \"../../utils/afterAnimationEnd\";\nimport \"./style.scss\";\n\nexport default forwardRef(({ texts = [] }, ref) => {\n    const [begin, setBegin] = useState(false);\n    const lastItemRef = useRef();\n    const play = () => {\n        setBegin(true);\n        return afterAnimationEnd(lastItemRef.current, texts.length * 1000);\n    };\n\n    useImperativeHandle(ref, () => ({\n        play,\n    }));\n\n    return (\n        <ul className='fadetext'>\n            {texts.map((text, index) => {\n                const isLastItem = index + 1 === texts.length;\n                return (\n                    <li\n                        ref={isLastItem ? lastItemRef : undefined}\n                        className={begin ? \"show\" : \"\"}\n                        key={index}\n                        style={{ animationDelay: `${index}s` }}>\n                        {text}\n                    </li>\n                );\n            })}\n        </ul>\n    );\n});\n","export default async function afterTransitionEnd(elem, duration) {\n    if (elem) {\n        if (Reflect.has(elem, \"ontransitionend\")) {\n            return new Promise((resolve) => {\n                const onEnd = () => {\n                    elem.removeEventListener(\"transitionend\", onEnd);\n                    resolve(true);\n                };\n                elem.addEventListener(\"transitionend\", onEnd);\n            });\n        } else {\n            return new Promise((resolve) => {\n                setTimeout(resolve, duration);\n            });\n        }\n    }\n    return false;\n}\n","import React, { useRef, useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport afterTransitionEnd from \"../../utils/afterTransitionEnd\";\nimport \"./style.scss\";\n\nconst ANM_DURATION = 500;\n\nexport default function Modal(props) {\n    const ref = useRef();\n    let container = ref.current;\n\n    const detachFromDOM = () => {\n        ref.current && ref.current.remove();\n    };\n\n    useEffect(() => detachFromDOM, []);\n\n    if (props.visible) {\n        if (!container) {\n            container = document.createElement(\"div\");\n            container.className = \"modal\";\n            ref.current = container;\n        }\n        if (!container.parentElement) {\n            document.body.appendChild(container);\n        }\n        setTimeout(() => container.classList.add(\"fade\"));\n    } else {\n        if (container) {\n            container.classList.remove(\"fade\");\n            afterTransitionEnd(container, ANM_DURATION).then(detachFromDOM);\n        }\n    }\n\n    if (container) {\n        return createPortal(\n            <>\n                <div className='bg' onClick={props.onBgClick}></div>\n                <div className='content'>{props.children}</div>\n            </>,\n            container\n        );\n    } else {\n        return null;\n    }\n}\n","export const MESSAGES = {\n    START: 1,\n    ON_FRAME_RENDER: 2,\n    LOADING_PROGRESS: 3,\n    LOADING_ERROR: 4,\n    LOADED_PATIENT: 5,\n    LOADED_SKYTEXTURE: 6,\n    LOADED_ANGEL: 7,\n    TAP_PRESS: 8\n};\n\nexport default class Messenger {\n    constructor() {\n        this.map = new Map();\n    }\n\n    send = (message, content) => {\n        if (this.map.has(message)) {\n            const callbacks = this.map.get(message);\n            for (const callback of callbacks) {\n                callback(message, content);\n            }\n        }\n    };\n\n    listen = (message, callback) => {\n        let callbacks;\n        if (this.map.has(message)) {\n            callbacks = this.map.get(message);\n            callbacks.push(callback);\n        } else {\n            callbacks = [callback];\n        }\n        this.map.set(message, callbacks);\n    };\n\n    mute = (message, callback) => {\n        if (this.map.has(message)) {\n            let callbacks = this.map.get(message);\n            this.map.set(\n                message,\n                callbacks.filter((func) => func !== callback)\n            );\n        }\n    };\n}\n","import React from \"react\";\n\nexport default function Confirm({ onConfirm }) {\n    return (\n        <div className='modal_text'>\n            <p className='start'>开始CPR之前</p>\n            <p className='title'>1.确认当前环境安全</p>\n            <p className='title'>2.确认患者已心脏骤停</p>\n            <ul className='desc'>\n                <li>2.1 轻拍伤员肩膀,大声呼喊患者，无回应</li>\n                <li>2.2 口鼻无呼吸，胸廓无起伏</li>\n                <li>2.3 颈动脉无搏动</li>\n            </ul>\n            <p className='title'>3.确认已为患者报警120</p>\n            <button onClick={onConfirm}>确认</button>\n        </div>\n    );\n}\n","import React from \"react\";\n\nexport default function Success({ onConfirm }) {\n    return (\n        <div className='modal_text'>\n            <p className='start'>抢救成功！</p>\n            <button onClick={onConfirm}>再来一次</button>\n        </div>\n    );\n}\n","import React from \"react\";\n\nexport default function Airway({ onConfirm }) {\n    return (\n        <div className='modal_text'>\n            <p className='start'>人工呼吸</p>\n            <p className='title'>开放气道-压额抬颏</p>\n            <ul className='desc'>\n                <li>确认患者无颈椎损伤，一手放在前额向下压，另一首放在下颌向上抬起</li>\n            </ul>\n            <p className='title'>人工呼吸要求</p>\n            <ul className='desc'>\n                <li>口对口连吹2次，每次至少持续一秒</li>\n                <li>吹气应能看到胸廓有起伏</li>\n            </ul>\n            <button onClick={onConfirm}>好的</button>\n        </div>\n    );\n}\n","import React from \"react\";\n\nexport default function PushIntro({ onConfirm }) {\n    return (\n        <div className='modal_text'>\n            <p className='start'>如何进行胸外按压</p>\n            <p className='title'>1.按压姿势</p>\n            <ul className='desc'>\n                <li>靠近胸部一侧，脱去患者外套，保证按压力量垂直于胸骨</li>\n            </ul>\n            <p className='title'>2.按压部位</p>\n            <ul className='desc'>\n                <li>按压部位在乳头连线中点处</li>\n            </ul>\n            <p className='title'>3.按压手势</p>\n            <ul className='desc'>\n                <li>双掌叠加，手指不触碰胸部，肩膀手臂垂直于胸骨</li>\n            </ul>\n            <p className='title'>4.按压频率幅度</p>\n            <ul className='desc'>\n                <li>频率每分钟100次以上，幅度为成人5cm、幼儿3cm、婴儿2cm左右</li>\n            </ul>\n            <button onClick={onConfirm}>开始</button>\n        </div>\n    );\n}","import { useRef, useState } from \"react\";\n\nexport default function useModal() {\n    const [visibility, setVisibility] = useState(false);\n    const ref = useRef();\n\n    const show = () =>\n        new Promise((resolve) => {\n            setVisibility(true);\n            ref.current = resolve;\n        });\n\n    const hide = () => {\n        setVisibility(false);\n        ref.current && ref.current();\n    };\n\n    return {\n        visibility,\n        show,\n        hide,\n    };\n}\n","import React, { useRef, useState, useEffect, forwardRef, useImperativeHandle } from \"react\";\nimport HeartBeat from \"../../../../components/HeartBeat\";\nimport Modal from \"../../../../components/Modal\";\nimport Timer from \"../../../../components/Timer\";\nimport TapTap from \"../../../../components/TapTap\";\nimport Confirm from \"./Confirm\";\nimport Success from \"./Success\";\nimport Airway from \"./Airway\";\nimport PushIntro from \"./PushIntro\";\nimport useModal from \"../Hooks/useModal\";\n\nexport default forwardRef((props, ref) => {\n    const [heartBeatVisibility, setHeartBeatVisibility] = useState(false);\n    const [btnText, setBtnText] = useState(\"\");\n    const { visibility: confirmVisiblity, show: showConfirm, hide: hideConfirm } = useModal();\n    const { visibility: pushVisibility, show: showPush, hide: hidePush } = useModal();\n    const { visibility: airwayVisibility, show: showAirway, hide: hideAirway } = useModal();\n    const { visibility: successVisibility, show: showSuccess, hide: hideSuccess } = useModal();\n\n    const heartBeatRef = useRef();\n    const timerRef = useRef();\n    const tapRef = useRef();\n\n    const playHeartBeat = () => {\n        heartBeatRef.current && heartBeatRef.current.beat();\n    };\n\n    const setHeartBeatMode = (mode) => {\n        heartBeatRef.current && heartBeatRef.current.setMode(mode);\n    };\n\n    const startTimer = () => {\n        timerRef.current.start();\n    };\n\n    const showTap = () => {\n        tapRef.current.show();\n    };\n\n    const hideTap = () => {\n        tapRef.current.hide();\n    };\n\n    const toggleTap = () => {\n        tapRef.current.togglePlay();\n    };\n\n    useEffect(() => {\n        props.onMount();\n    });\n\n    useImperativeHandle(ref, () => ({\n        setHeartBeatVisibility,\n        playHeartBeat,\n        setHeartBeatMode,\n        showConfirm,\n        startTimer,\n        showPushIntro: showPush,\n        toggleTap,\n        showAirwayIntro: showAirway,\n        showSuccess,\n        showTap,\n        hideTap,\n        setBtnText,\n    }));\n\n    return (\n        <div className='status'>\n            <HeartBeat visibility={heartBeatVisibility} ref={heartBeatRef} />\n            <Modal visible={confirmVisiblity}>\n                <Confirm onConfirm={hideConfirm} />\n            </Modal>\n            <Modal visible={pushVisibility}>\n                <PushIntro onConfirm={hidePush} />\n            </Modal>\n            <Modal visible={airwayVisibility}>\n                <Airway onConfirm={hideAirway} />\n            </Modal>\n            <Modal visible={successVisibility}>\n                <Success\n                    onConfirm={() => {\n                        hideSuccess();\n                    }}\n                />\n            </Modal>\n            <div className='time_past'>\n                <p className='text'>已用时间</p>\n                <Timer ref={timerRef} />\n            </div>\n            <TapTap ref={tapRef} onTap={props.onTap} speed={120} requirement={0.2}></TapTap>\n            {btnText ? (\n                <button className='operate_btn' onClick={props.onBtnPress}>\n                    {btnText}\n                </button>\n            ) : null}\n        </div>\n    );\n});\n","import React, { forwardRef, useRef, useState, useEffect, useImperativeHandle } from \"react\";\nimport FadeText from \"../../../../components/FadeText\";\nimport afterAnimationEnd from \"../../../../utils/afterAnimationEnd\";\n\nconst TEXTS = [\n    \"近年来猝死发生频率逐渐提高，且有年轻化趋势\",\n    \"心博骤停不及时抢救可立刻失去生命\",\n    \"如果在4分钟内实施初步的CPR(心肺复苏术)\",\n    \"抢救成功的可能性会大大提高！\",\n    \"通过本程序来学习CPR知识\",\n    \"参与一次模拟拯救吧。\",\n];\n\nexport default forwardRef(({ onMount, onStart }, ref) => {\n    const textRef = useRef();\n    const introRef = useRef();\n    const [zoom, setZoom] = useState(false);\n    const [showBtn, setShowBtn] = useState(false);\n    const [progress, setProgress] = useState(0);\n\n    const zoomOut = () => {\n        setZoom(true);\n        return afterAnimationEnd(introRef.current, 2000);\n    };\n    const playText = () => textRef.current.play();\n    const showStartButton = () => {\n        setShowBtn(true);\n    };\n\n    useImperativeHandle(ref, () => ({\n        playText,\n        zoomOut,\n        setProgress,\n        showStartButton,\n    }));\n\n    useEffect(() => {\n        onMount();\n    });\n\n    const startBtnText = progress === 100 ? \"开始\" : `加载中 ${Math.floor(progress)}%`;\n    const startBtnClicked = progress >= 100 ? onStart : null;\n\n    return (\n        <div ref={introRef} className={`intro fullscreen ${zoom ? \"zoom\" : \"\"}`}>\n            <img src='/images/Intro/heart.jpg' className='bg' alt='bg' />\n            <FadeText ref={textRef} texts={TEXTS} />\n            <div className={`start ${showBtn ? \"show\" : \"\"}`} onClick={startBtnClicked}>\n                {startBtnText}\n            </div>\n        </div>\n    );\n});\n","import React, { createRef } from \"react\";\nimport StatusUI from \"../View/Components/StatusUI\";\nimport Intro from \"../View/Components/Intro\";\nimport ReactDOM from \"react-dom\";\nimport { MESSAGES } from \"./Messenger\";\nimport { MODE } from \"../../../components/HeartBeat\";\n\nconst PUSH_ROUND = 30;\n\nexport default class UI {\n    constructor(container, messenger) {\n        this.container = container;\n        this.messenger = messenger;\n        this.pushTimes = 0;\n        this.introRef = createRef();\n        this.statusRef = createRef();\n        this.messenger.listen(MESSAGES.LOADING_PROGRESS, this.updateIntroProgress);\n    }\n\n    showIntro = async () => {\n        ReactDOM.unmountComponentAtNode(this.container);\n        const onStart = () => {\n            this.messenger.send(MESSAGES.START);\n        };\n        await new Promise((resolve) => {\n            ReactDOM.render(<Intro ref={this.introRef} onMount={resolve} onStart={onStart} />, this.container);\n        });\n        await this.introRef.current.playText();\n        this.introRef.current.showStartButton();\n    };\n\n    zoomOutIntro = async () => {\n        await this.introRef.current.zoomOut();\n        ReactDOM.unmountComponentAtNode(this.container);\n    };\n\n    updateIntroProgress = (message, content) => {\n        this.introRef.current && this.introRef.current.setProgress(content.progress * 100);\n    };\n\n    showStatusUI = () => {\n        return new Promise((resolve) => {\n            ReactDOM.render(\n                <StatusUI ref={this.statusRef} onMount={resolve} onTap={this.onTap} onBtnPress={this.onBtnPress} />,\n                this.container\n            );\n        });\n    };\n\n    playHeartBeat = () => {\n        this.statusRef.current.setHeartBeatVisibility(true);\n        this.statusRef.current.playHeartBeat();\n    };\n\n    playHeartAttack = () => {\n        this.statusRef.current.setHeartBeatMode(MODE.RIP);\n    };\n\n    confirmHeartAttack = () => this.statusRef.current.showConfirm();\n\n    showPushIntro = () => this.statusRef.current.showPushIntro();\n\n    startTap = () => {\n        return new Promise((resolve) => {\n            this.statusRef.current.showTap();\n            this.statusRef.current.toggleTap();\n            this.tapProcess = resolve;\n        });\n    };\n\n    stopTap = () => {\n        this.statusRef.current.hideTap();\n        this.statusRef.current.toggleTap();\n        if (this.tapProcess) {\n            this.tapProcess();\n            this.tapProcess = null;\n        }\n    };\n\n    onTap = () => {\n        this.pushTimes++;\n        if (this.pushTimes >= PUSH_ROUND) {\n            this.pushTimes = 0;\n            this.stopTap();\n        }\n        this.messenger.send(MESSAGES.TAP_PRESS);\n    };\n\n    startTimer = () => {\n        this.statusRef.current.startTimer();\n    };\n\n    waitBtn = (text) => {\n        return new Promise((resolve) => {\n            this.statusRef.current.setBtnText(text);\n            this.btnProcess = resolve;\n        });\n    };\n\n    onBtnPress = () => {\n        this.statusRef.current.setBtnText(\"\");\n        this.btnProcess && this.btnProcess();\n        this.btnProcess = null;\n    };\n\n    showAirwayIntro = () => this.statusRef.current.showAirwayIntro();\n\n    showSuccess = () => this.statusRef.current.showSuccess();\n}\n","import { MESSAGES } from \"../Workers/Messenger\";\n\nexport default class Patient {\n    constructor(messenger) {\n        this.messenger = messenger;\n        messenger.listen(MESSAGES.ON_FRAME_RENDER, this.render);\n        messenger.listen(MESSAGES.LOADED_PATIENT, this.receiveModel);\n    }\n\n    receiveModel = (message, model) => {\n        console.log(model);\n        this.geometry = model;\n    };\n\n    getGeometry = () => {\n        return this.geometry.scene ? this.geometry.scene : this.geometry;\n    };\n\n    ready = () => {\n        this.getGeometry().traverse((object) => {\n            if (object.isMesh) {\n                object.castShadow = true;\n                // object.material.color = new THREE.Color(1, 0, 0);\n                object.material.skinning = true;\n            }\n        });\n    };\n\n    standby = () => {\n        const scene = this.getGeometry();\n        scene.scale.set(20, 20, 20);\n        scene.rotation.set(0, 0, -0.5 * Math.PI);\n        scene.position.set(50, 0, 0);\n    };\n\n    takeoff = () => {\n        this.getGeometry().traverse((object) => {\n            if (object.name === \"g_Clothes_low_uv1Group29821\") {\n                object.visible = false;\n            }\n        });\n    };\n\n    anmFaint = () => {\n        return;\n        // const mesh = this.getGeometry();\n        // const mixer = new THREE.AnimationMixer(mesh);\n        // const clip = THREE.AnimationClip.findByName(mesh.animations, \"Take 001\");\n        // const action = mixer.clipAction(clip);\n        // this.mixer = mixer;\n        // action.play();\n    };\n\n    getScreenCoords = () => this.util.getScreenCoords(this.getGeometry());\n\n    render = (message, content) => {\n        if (this.mixer) {\n            this.mixer.update(content.frameTime * 300);\n        }\n    };\n}\n","import * as THREE from \"three\";\nimport { MESSAGES } from \"../Workers/Messenger\";\n\nconst ANM_PUSH_DURATION = 300;\nconst ANM_PUSH_OFFSET = 10;\n\nexport default class Angel {\n    constructor(messenger, util) {\n        this.messenger = messenger;\n        this.util = util;\n        this.geometry = {};\n        messenger.listen(MESSAGES.ON_FRAME_RENDER, this.render);\n        messenger.listen(MESSAGES.LOADED_ANGEL, this.receivePushModel);\n        messenger.listen(MESSAGES.TAP_PRESS, this.push);\n    }\n\n    standby = () => {\n        this.geometry.push.position.set(20, -5, 20);\n        this.geometry.push.rotation.set(0.5 * Math.PI, 0.5 * Math.PI, 0);\n\n        this.geometry.lift.position.set(27, 1, 13);\n        this.geometry.lift.rotation.set(-0.5 * Math.PI, 0, -0.8 * Math.PI);\n\n        this.geometry.press.position.set(42, 3, 12);\n        this.geometry.press.rotation.set(0.5 * Math.PI, 0.5 * Math.PI, 0);\n\n        for (const item of this.getGeometry()) {\n            item.traverse((object) => {\n                if (object.isMesh) {\n                    object.material = new THREE.MeshBasicMaterial({\n                        color: 0xf1b285,\n                        skinning: true,\n                    });\n                }\n            });\n        }\n\n        this.geometry.push.visible = false;\n        this.geometry.lift.visible = false;\n        this.geometry.press.visible = false;\n    };\n\n    push = () => {\n        if (this.isAnmPushing) {\n            return;\n        } else {\n            this.isAnmPushing = Date.now();\n        }\n    };\n\n    showPushHand = () => {\n        this.geometry.push.visible = true;\n    };\n\n    hidePushHand = () => {\n        this.geometry.push.visible = false;\n    };\n\n    showLiftHand = () => {\n        this.geometry.lift.visible = true;\n    };\n\n    hideLiftHand = () => {\n        this.geometry.lift.visible = false;\n    };\n\n    showPressHand = () => {\n        this.geometry.press.visible = true;\n    };\n\n    hidePressHand = () => {\n        this.geometry.press.visible = false;\n    };\n\n    getGeometry = () => Object.values(this.geometry);\n\n    receivePushModel = (message, data) => {\n        this.geometry[data.name] = data.mesh;\n    };\n\n    render = () => {\n        if (this.isAnmPushing) {\n            const timeOffset = Date.now() - this.isAnmPushing;\n            if (timeOffset > ANM_PUSH_DURATION) {\n                this.geometry.push.position.z = 20;\n                this.isAnmPushing = null;\n            } else {\n                const percent = 1 - 2 * Math.abs(0.5 - timeOffset / ANM_PUSH_DURATION);\n                this.geometry.push.position.z = 20 - percent * ANM_PUSH_OFFSET;\n            }\n        }\n    };\n}\n","import * as THREE from \"three\";\nimport { MESSAGES } from \"./Messenger\";\nexport default class Scenery {\n    constructor(messenger) {\n        this.messenger = messenger;\n        messenger.listen(MESSAGES.LOADED_SKYTEXTURE, this.receiveSkyTexture);\n    }\n\n    ready = () => {\n        const scene = new THREE.Scene();\n        scene.background = new THREE.Color(0xffffff);\n        this.scene = scene;\n    };\n\n    getScene = () => this.scene;\n\n    receiveSkyTexture = (message, texture) => {\n        this.skyTexture = texture;\n    };\n\n    createBackground = () => {\n        var skyPlane = new THREE.PlaneGeometry(1000, 1000);\n        const material = new THREE.MeshMatcapMaterial({ map: this.skyTexture, color: 0xffffff });\n        const sky = new THREE.Mesh(skyPlane, material);\n        sky.rotateX(0.5 * Math.PI);\n        sky.position.set(0, 500, 500);\n        this.scene.add(sky);\n    };\n\n    createFloor = () => {\n        var planeGeometry = new THREE.PlaneGeometry(1000, 1000);\n        var planeMaterial = new THREE.MeshPhongMaterial({ color: 0xffffff, depthWrite: false });\n        var plane = new THREE.Mesh(planeGeometry, planeMaterial);\n        plane.position.set(0, 0, 0);\n        plane.receiveShadow = true;\n        this.scene.add(plane);\n    };\n\n    buildScene = (meshes) => {\n        console.log(meshes);\n        this.createFloor();\n        this.createBackground();\n\n        for (const mesh of meshes) {\n            this.scene.add(mesh);\n        }\n    };\n}\n","import * as THREE from \"three\";\nimport { MESSAGES } from \"./Messenger\";\n\nexport default class Screen {\n    constructor(canvas, messenger) {\n        this.canvas = canvas;\n        this.messenger = messenger;\n        this.startTime = 0;\n        this.lastFrameTime = 0;\n    }\n\n    ready = () => {\n        const renderer = new THREE.WebGLRenderer({ canvas: this.canvas });\n        renderer.setPixelRatio(window.devicePixelRatio);\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.toneMapping = THREE.ACESFilmicToneMapping;\n        renderer.toneMappingExposure = 1.25;\n        renderer.outputEncoding = THREE.sRGBEncoding;\n        renderer.shadowMap.enabled = true;\n        renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n        this.renderer = renderer;\n    };\n\n    play = ({ scene, camera }) => {\n        this.scene = scene;\n        this.camera = camera;\n        this.render();\n    };\n\n    render = (pageTime = 0) => {\n        if (!this.startTime && pageTime) {\n            this.startTime = pageTime;\n        }\n        const { scene, camera } = this;\n        this.messenger.send(MESSAGES.ON_FRAME_RENDER, {\n            pastTime: pageTime - this.startTime,\n            frameTime: this.lastFrameTime ? pageTime - this.lastFrameTime : 0,\n        });\n        this.renderer.render(scene, camera);\n        this.lastFrameTime = pageTime;\n        requestAnimationFrame(this.render);\n    };\n}\n","import * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport { MESSAGES } from \"./Messenger\";\n\nexport default class Photographer {\n    constructor(canvas, messenger) {\n        this.canvas = canvas;\n        this.messenger = messenger;\n    }\n\n    ready = () => {\n        this.messenger.listen(MESSAGES.ON_FRAME_RENDER, this.render);\n        const camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 1, 10000);\n        this.camera = camera;\n    };\n\n    standby = () => {\n        this.focusBody();\n    };\n\n    enableUserControl = () => {\n        const control = new OrbitControls(this.camera, this.canvas);\n        control.enablePan = false;\n        control.enableZoom = false;\n        // control.maxPolarAngle = 0.75 * Math.PI;\n        // control.minPolarAngle = 0.25 * Math.PI;\n        // control.minAzimuthAngle = -0.4 * Math.PI;\n        // control.maxAzimuthAngle = 0.4 * Math.PI;\n        this.control = control;\n    };\n\n    getCamera = () => this.camera;\n\n    focusBody = () => {\n        this.camera.position.set(0, -80, 50);\n        if (this.control) {\n            this.control.target = new THREE.Vector3(0, 0, 0);\n            this.control.update();\n        }\n    };\n\n    focusChest = () => {\n        this.camera.position.set(15, -60, 45);\n        if (this.control) {\n            this.control.target = new THREE.Vector3(15, 0, 0);\n            this.control.update();\n        }\n    };\n\n    focusHead = () => {\n        this.camera.position.set(30, -40, 25);\n        if (this.control) {\n            this.control.target = new THREE.Vector3(30, 0, 0);\n            this.control.update();\n        }\n    };\n\n    render = (message, content) => {\n        // console.log(this.control.getAzimuthalAngle(), this.control.getPolarAngle());\n    };\n}\n","import * as THREE from \"three\";\n\nexport default class Light {\n    lights = {};\n\n    ready = () => {\n        const amLight = new THREE.AmbientLight(0xffffff, 3);\n\n        const dirLight = new THREE.DirectionalLight(0xffffff, 1);\n        dirLight.position.multiplyScalar(1.3);\n        dirLight.castShadow = true;\n\n        const d = 300;\n        dirLight.shadow.mapSize.width = 1024;\n        dirLight.shadow.mapSize.height = 1024;\n        dirLight.shadow.camera.left = -d;\n        dirLight.shadow.camera.right = d;\n        dirLight.shadow.camera.top = d;\n        dirLight.shadow.camera.bottom = -d;\n        dirLight.shadow.camera.far = 1000;\n\n        this.lights = {\n            amLight,\n            dirLight\n        };\n    };\n\n    standby = () => {\n        const { dirLight } = this.lights;\n        dirLight.position.set(0, -300, 100);\n    };\n\n    getLights = () => Object.values(this.lights);\n}\n","import * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader\";\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader\";\nimport { MESSAGES } from \"./Messenger\";\n\nconst PATH = {\n    PATIENT: \"assets/patient/patient.glb\",\n    SKY_MAP: \"assets/skybox2/clouds1_north.bmp\",\n    HANDPUSH: \"assets/hands/HandPush/HandPush.fbx\",\n    HANDLIFT: \"assets/hands/HandLift/Lift.fbx\",\n    HANDPRESS: \"assets/hands/HandPress/Press.fbx\",\n};\n// const FILE_TOTAL_COUNT = 10;\n\nexport default class Loader {\n    constructor(messenger) {\n        this.manager = new THREE.LoadingManager(this.onComplete, this.onProgress, this.onError);\n        this.messenger = messenger;\n    }\n\n    onComplete = () => {};\n\n    onProgress = (fileName, current, total) => {\n        console.log(\"loaded\", fileName, current, total);\n        this.messenger.send(MESSAGES.LOADING_PROGRESS, {\n            progress: current / total,\n        });\n    };\n\n    onError = () => {\n        this.messenger.send(MESSAGES.LOADING_ERROR);\n    };\n\n    loadGLTF = (path, useDraco = false) => {\n        const loader = new GLTFLoader(this.manager);\n        let dracoLoader;\n        if (useDraco) {\n            dracoLoader = new DRACOLoader(this.manager);\n            dracoLoader.setDecoderPath(\"libs/draco/\");\n            dracoLoader.setDecoderConfig({ type: \"js\" });\n            dracoLoader.preload();\n            loader.setDRACOLoader(dracoLoader);\n        }\n        return new Promise((resolve) => {\n            loader.load(path, resolve);\n        });\n    };\n\n    loadTexture = (path) => {\n        const loader = new THREE.TextureLoader(this.manager);\n        return loader.load(path);\n    };\n\n    loadFBX = (path) => {\n        const loader = new FBXLoader(this.manager);\n        return new Promise((resolve) => {\n            loader.load(path, resolve);\n        });\n    };\n\n    loadResources = async () => {\n        const skyTexture = this.loadTexture(PATH.SKY_MAP);\n        this.messenger.send(MESSAGES.LOADED_SKYTEXTURE, skyTexture);\n\n        const patient = await this.loadGLTF(PATH.PATIENT, false);\n        this.messenger.send(MESSAGES.LOADED_PATIENT, patient);\n\n        const push = await this.loadFBX(PATH.HANDPUSH);\n        this.messenger.send(MESSAGES.LOADED_ANGEL, { name: \"push\", mesh: push });\n\n        const lift = await this.loadFBX(PATH.HANDLIFT);\n        this.messenger.send(MESSAGES.LOADED_ANGEL, { name: \"lift\", mesh: lift });\n\n        const press = await this.loadFBX(PATH.HANDPRESS);\n        this.messenger.send(MESSAGES.LOADED_ANGEL, { name: \"press\", mesh: press });\n    };\n}\n","import getScreenCoords from \"../../../utils/getScreenCoords\";\n\nexport default class Util {\n    ready = (props) => {\n        this.camera = props.camera;\n    };\n\n    getScreenCoords = (mesh) => getScreenCoords(mesh, this.camera);\n}\n","export default function getScreenCoords(mesh, camera) {\n    const pos = mesh.position.clone();\n    const vec = pos.project(camera);\n    const { availWidth, availHeight } = window.screen;\n    return {\n        x: ((vec.x + 1) * availWidth) / 2,\n        y: ((-vec.y + 1) * availHeight) / 2,\n    };\n}\n","import Messenger, { MESSAGES } from \"../Workers/Messenger\";\nimport UIManager from \"../Workers/UI\";\nimport Patient from \"../Actors/Patient\";\nimport Angel from \"../Actors/Angel\";\nimport Scenery from \"../Workers/Scenery\";\nimport Screen from \"../Workers/Screen\";\nimport Photographer from \"../Workers/Photographer\";\nimport Light from \"../Workers/Light\";\nimport Loader from \"../Workers/Loader\";\nimport Util from \"../Workers/Util\";\n\nexport default class ChiefDirector {\n    constructor(container, canvas) {\n        const messenger = new Messenger();\n        const util = new Util();\n        this.UI = new UIManager(container, messenger);\n        this.scenery = new Scenery(messenger);\n        this.screen = new Screen(canvas, messenger);\n        this.photographer = new Photographer(canvas, messenger);\n        this.patient = new Patient(messenger);\n        this.angel = new Angel(messenger);\n        this.light = new Light();\n        this.loader = new Loader(messenger);\n        this.messenger = messenger;\n        this.util = util;\n    }\n\n    ready = () => {\n        this.scenery.ready();\n        this.screen.ready();\n        this.photographer.ready();\n        this.light.ready();\n        this.util.ready({\n            camera: this.photographer.getCamera(),\n        });\n        this.messenger.listen(MESSAGES.START, this.onMessage);\n    };\n\n    action = async () => {\n        const { loader, patient, light, scenery, photographer, UI, screen, angel } = this;\n\n        // ShowIntro\n        UI.showIntro();\n\n        // Load\n        await loader.loadResources();\n\n        // TODO: Dev\n        this.cpr();\n\n        // Build Scene\n        scenery.buildScene([patient.getGeometry(), ...light.getLights(), ...angel.getGeometry()]);\n\n        // Standby\n        patient.ready();\n        patient.standby();\n        angel.standby();\n        light.standby();\n        photographer.standby();\n        photographer.enableUserControl();\n\n        // Play\n        screen.play({\n            scene: scenery.getScene(),\n            camera: photographer.getCamera(),\n        });\n    };\n\n    cpr = async () => {\n        // Switch UI\n        await this.UI.zoomOutIntro();\n        await this.UI.showStatusUI();\n\n        // HeartBeat\n        this.UI.playHeartBeat();\n\n        // Intro\n        await this.UI.confirmHeartAttack();\n\n        // HeartAttack\n        await this.patient.anmFaint();\n        await this.UI.showPushIntro();\n\n        this.UI.playHeartAttack();\n        this.UI.startTimer();\n\n        // Takeoff\n        await this.UI.waitBtn(\"脱去衣物\");\n\n        this.patient.takeoff();\n\n        // Push\n        this.photographer.focusChest();\n\n        this.angel.showPushHand();\n\n        await this.UI.startTap();\n\n        this.angel.hidePushHand();\n\n        // airway\n        this.photographer.focusHead();\n\n        this.angel.showLiftHand();\n\n        this.angel.showPressHand();\n\n        await this.UI.showAirwayIntro();\n\n        await this.UI.waitBtn(\"吹气 1/2\");\n        await this.UI.waitBtn(\"吹气 2/2\");\n\n        this.UI.playHeartBeat();\n        await this.UI.showSuccess();\n    };\n\n    onMessage = (message, content) => {\n        switch (message) {\n            case MESSAGES.START:\n                this.messenger.mute(MESSAGES.START, this.onMessage);\n                this.cpr();\n                break;\n            default:\n                break;\n        }\n    };\n}\n","import React, { useRef, useEffect } from \"react\";\nimport ChiefDirector from \"../Director/ChiefDirector\";\nimport \"../../../style/cpr.scss\";\n\nexport default () => {\n    const UIRef = useRef();\n    const canvasRef = useRef();\n\n    useEffect(() => {\n        const director = new ChiefDirector(UIRef.current, canvasRef.current);\n        director.ready();\n        director.action();\n    });\n\n    return (\n        <div className='cpr'>\n            <div className='ui' ref={UIRef} />\n            <canvas className='canvas' ref={canvasRef} />\n        </div>\n    );\n};\n"],"sourceRoot":""}