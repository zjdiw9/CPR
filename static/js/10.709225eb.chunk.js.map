{"version":3,"sources":["components/TapTap/index.jsx","app/demo/View/TapTap.jsx"],"names":["forwardRef","fRef","speed","onTap","onMiss","requirement","useState","running","setRunning","visible","setVisible","imgRef","useRef","togglePlay","show","hide","useImperativeHandle","className","style","display","ref","WebkitAnimationPlayState","animationPlayState","animationDuration","src","alt","PART_NUM","onClick","matixStr","document","defaultView","getComputedStyle","current","transform","test","percent","Math","abs","Number","RegExp","$1","window","screen","width","accuracy","tapRef","res","console","log"],"mappings":"sJAKeA,0BAAW,WAAkDC,GAAU,IAAD,IAAxDC,aAAwD,MAAhD,IAAgD,EAA3CC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,OAAoC,IAA5BC,mBAA4B,MAAd,EAAc,IACnDC,oBAAS,GAD0C,mBAC1EC,EAD0E,KACjEC,EADiE,OAEnDF,oBAAS,GAF0C,mBAE1EG,EAF0E,KAEjEC,EAFiE,KAG3EC,EAASC,mBACTC,EAAa,WACfL,GAAYD,IAGVO,EAAO,kBAAMJ,GAAW,IACxBK,EAAO,kBAAML,GAAW,IAuB9B,OANAM,8BAAoBf,GAAM,iBAAO,CAC7BY,aACAC,OACAC,WAIA,yBAAKE,UAAU,SAASC,MAAO,CAAEC,QAASV,EAAU,QAAU,SAC1D,yBACIW,IAAKT,EACLO,MAAO,CACHG,yBAA0Bd,EAAU,UAAY,SAChDe,mBAAoBf,EAAU,UAAY,SAC1CgB,kBAAkB,GAAD,OAAK,GAAKrB,EAAV,MAErBsB,IAAI,yBACJC,IAAI,OAER,yBACIR,UAAU,QACVC,MAAO,CACHG,yBAA0Bd,EAAU,UAAY,SAChDe,mBAAoBf,EAAU,UAAY,SAC1CgB,kBAAkB,GAAD,OAAMG,IAAiBxB,EAAvB,QAEzB,yBACIe,UAAU,QACVC,MAAO,CACHG,yBAA0Bd,EAAU,UAAY,SAChDe,mBAAoBf,EAAU,UAAY,SAC1CgB,kBAAkB,GAAD,OAAMG,IAAiBxB,EAAvB,QAEzB,yBAAKe,UAAU,MAAMU,QA/CV,WACf,IAAMC,EAAWC,SAASC,YAAYC,iBAAiBpB,EAAOqB,QAAS,MAAMC,UAC7E,GAAIL,GAAYzB,GACR,uCAAuC+B,KAAKN,GAAW,CACvD,IAAMO,EAAUC,KAAKC,IAAIC,OAAOC,OAAOC,MAAQC,OAAOC,OAAOC,MAjB5D,GAkBKC,EAAW,EAA8B,EAA1BR,KAAKC,IAAIF,EAAU,IACpCS,GAAYvC,EACZF,EAAMyC,GAENxC,GAAUA,EAAOwC,MAsCzB,qB,qDC/DZ,mCAGe,qBACX,IAAMC,EAASjC,mBAUf,OACI,6BACI,kBAAC,IAAD,CAAQQ,IAAKyB,EAAQ1C,MANf,SAAC2C,GACXC,QAAQC,IAAIF,IAK2B5C,MAAO,MAC1C,4BAAQyB,QAXG,WACfkB,EAAOb,QAAQnB,eAUX","file":"static/js/10.709225eb.chunk.js","sourcesContent":["import React, { forwardRef, useImperativeHandle, useState, useRef } from \"react\";\nimport \"./style.scss\";\n\nconst PART_NUM = 4;\n\nexport default forwardRef(({ speed = 120, onTap, onMiss, requirement = 0 }, fRef) => {\n    const [running, setRunning] = useState(false);\n    const [visible, setVisible] = useState(false);\n    const imgRef = useRef();\n    const togglePlay = () => {\n        setRunning(!running);\n    };\n\n    const show = () => setVisible(true);\n    const hide = () => setVisible(false);\n\n    const onTapPress = () => {\n        const matixStr = document.defaultView.getComputedStyle(imgRef.current, null).transform;\n        if (matixStr && onTap) {\n            if (/^matrix\\(.+, .+, .+, .+, (.+), .+\\)$/.test(matixStr)) {\n                const percent = Math.abs(Number(RegExp.$1)) / (window.screen.width / PART_NUM);\n                const accuracy = 1 - Math.abs(percent - 0.5) * 2;\n                if (accuracy >= requirement) {\n                    onTap(accuracy);\n                } else {\n                    onMiss && onMiss(accuracy);\n                }\n            }\n        }\n    };\n\n    useImperativeHandle(fRef, () => ({\n        togglePlay,\n        show,\n        hide,\n    }));\n\n    return (\n        <div className='taptap' style={{ display: visible ? \"block\" : \"none\" }}>\n            <img\n                ref={imgRef}\n                style={{\n                    WebkitAnimationPlayState: running ? \"running\" : \"paused\",\n                    animationPlayState: running ? \"running\" : \"paused\",\n                    animationDuration: `${60 / speed}s`,\n                }}\n                src='/images/tap/scroll.png'\n                alt='bg'\n            />\n            <div\n                className='cover'\n                style={{\n                    WebkitAnimationPlayState: running ? \"running\" : \"paused\",\n                    animationPlayState: running ? \"running\" : \"paused\",\n                    animationDuration: `${(PART_NUM * 60) / speed}s`,\n                }}></div>\n            <div\n                className='block'\n                style={{\n                    WebkitAnimationPlayState: running ? \"running\" : \"paused\",\n                    animationPlayState: running ? \"running\" : \"paused\",\n                    animationDuration: `${(PART_NUM * 60) / speed}s`,\n                }}></div>\n            <div className='tap' onClick={onTapPress}>\n                按压\n            </div>\n        </div>\n    );\n});\n","import React, { useRef } from \"react\";\nimport TapTap from \"../../../components/TapTap\";\n\nexport default function () {\n    const tapRef = useRef();\n\n    const onBtnPress = () => {\n        tapRef.current.togglePlay();\n    };\n\n    const onTap = (res) => {\n        console.log(res);\n    };\n\n    return (\n        <div>\n            <TapTap ref={tapRef} onTap={onTap} speed={120} />\n            <button onClick={onBtnPress}>Play/Stop</button>\n        </div>\n    );\n}\n"],"sourceRoot":""}