{"version":3,"sources":["../node_modules/_@babel_runtime@7.12.5@@babel/runtime/helpers/esm/classCallCheck.js","components/HeartBeat/beat.js","components/HeartBeat/ChartManager.js","components/HeartBeat/index.jsx","app/demo/View/Heart.jsx"],"names":["_classCallCheck","instance","Constructor","TypeError","normalBeats","generateBeats","index","round","value","stamp","times","result","lastBeat","beat","randomVal","Math","random","nextBeat","push","time","MODE","NORMAL","RIP","ChartManager","container","initChart","createChart","configChart","startBeat","hasInited","beatIndex","stopBeat","pastTime","pageTime","beats","chart","prepareData","anmStartTime","targetIndex","floor","offset","nextBeatPhase","shift","changeData","requestAnimationFrame","mode","baseIndex","setMode","console","log","F2","Chart","el","pixelRatio","window","devicePixelRatio","animate","padding","source","type","mask","range","tickCount","min","max","tooltip","axis","line","color","position","shape","render","this","BEAT_ROUND","forwardRef","props","ref","containerRef","useRef","managerRef","useImperativeHandle","current","useEffect","manager","className","visibility","Heart","heartBeatRef","onClick"],"mappings":"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","file":"static/js/11.e41027b2.chunk.js","sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","const normalBeats = [\n    10, 10, 10,     10, 10, 10,     10, 10, 10,     10, 10, 10,     10, 10, 10,\n    10.2, 10.75, 11.5,    12.25, 13, 12.25,   11.5, 10.75, 10,    10, 10, 10,     10, 9, 8,\n    12, 17, 22,   11, 6, 8,   10,10,10,    10,10,10,    10, 10.33, 10.66,\n    11,11.42,11.85,   12.28,12.71,13.14,     13.57,14,13.5,    13,12.5,12,  11.5,11,10.5,\n    10,10.5,11,     11.5,12,11.6,      11.2, 10.8,10.4,     10,10,10,   10,10,10\n];\n\nfunction generateBeats ({index = 0, round =1, value}){\n    let stamp = index;\n    let times = round;\n    const result = [];\n    while(times-- > 0){\n        let lastBeat = 0;\n        for(const beat of normalBeats){\n            let randomVal = 0;\n            if(lastBeat){   \n                randomVal = Math.random() * (lastBeat-beat);\n            }\n            let nextBeat = beat + randomVal;\n            result.push({\n                time: stamp++,\n                value: value || nextBeat\n            })\n            lastBeat = beat;\n\n        }\n    }\n    return result;\n}\n\n\nexport { generateBeats }","import F2 from \"@antv/f2\";\nimport { generateBeats } from \"./beat\";\n\nconst BEAT_ROUND = 75;\nexport const MODE = {\n    NORMAL: 1,\n    RIP: 2,\n};\n\nexport default class ChartManager {\n    constructor(container) {\n        this.container = container;\n        this.beats = generateBeats({ index: 0, round: 3, value: 10 });\n        this.beatIndex = 0;\n        this.baseIndex = BEAT_ROUND * 3;\n        this.nextBeatPhase = [];\n        this.mode = MODE.NORMAL;\n        this.hasInited = false;\n    }\n\n    initChart = () => {\n        const { createChart, configChart } = this;\n        createChart();\n        configChart();\n    };\n\n    startBeat = () => {\n        if (!this.hasInited) {\n            this.initChart();\n        }\n        if (this.beatIndex) {\n            return;\n        }\n        this.beat();\n    };\n\n    stopBeat = () => {};\n\n    beat = (pageTime = 0) => {\n        const { beats, chart, prepareData } = this;\n        let pastTime;\n        if (!this.anmStartTime) {\n            this.anmStartTime = pageTime;\n            pastTime = 0;\n        } else {\n            pastTime = pageTime - (this.anmStartTime || 0);\n        }\n        const targetIndex = Math.floor((pastTime / (60000 / 80)) * BEAT_ROUND);\n        while (this.beatIndex <= targetIndex) {\n            const offset = this.beatIndex % BEAT_ROUND;\n            // prepare data for next round\n            if (offset === 0) {\n                prepareData();\n            }\n            const nextBeat = this.nextBeatPhase[offset];\n            beats.shift();\n            beats.push(nextBeat);\n            this.beatIndex++;\n        }\n        chart.changeData(beats);\n        requestAnimationFrame(this.beat);\n    };\n\n    prepareData = () => {\n        switch (this.mode) {\n            case MODE.RIP:\n                this.nextBeatPhase = generateBeats({ index: this.beatIndex + this.baseIndex, value: 10 });\n                break;\n            case MODE.NORMAL:\n            default:\n                this.nextBeatPhase = generateBeats({\n                    index: this.beatIndex + this.baseIndex,\n                    round: 1,\n                });\n                break;\n        }\n    };\n\n    setMode = (mode) => {\n        console.log('ddd', mode);\n        this.mode = mode;\n    };\n\n    createChart = () => {\n        const chart = new F2.Chart({\n            el: this.container,\n            pixelRatio: window.devicePixelRatio,\n            animate: false,\n            padding: 0,\n        });\n        this.chart = chart;\n    };\n\n    configChart = () => {\n        const { chart, beats } = this;\n        const defs = {\n            time: {\n                type: \"timeCat\",\n                mask: \"HH:mm:ss\",\n                range: [0, 1],\n            },\n            value: {\n                tickCount: 2,\n                min: 4,\n                max: 24,\n            },\n        };\n        chart.source(beats, defs);\n        chart.tooltip(false);\n        chart.axis(false);\n        chart.line().color(\"#d21818\").position(\"time*value\").shape(\"smooth\");\n        chart.render();\n    };\n}\n","import React, { useEffect, useRef, useImperativeHandle, forwardRef } from \"react\";\nimport ChartManager from \"./ChartManager\";\n\nexport { MODE } from \"./ChartManager\";\nexport default forwardRef((props, ref) => {\n    const containerRef = useRef();\n    const managerRef = useRef();\n\n    useImperativeHandle(ref, () => ({\n        setMode: (mode) => managerRef.current.setMode(mode),\n        beat: () => managerRef.current.startBeat(),\n    }));\n\n    useEffect(() => {\n        const manager = new ChartManager(containerRef.current);\n        managerRef.current = manager;\n\n        return () => {\n            manager.stopBeat();\n        };\n    }, []);\n\n    return <canvas className={`heartbeat ${props.visibility ? \"\" : \"hidden\"}`} ref={containerRef}></canvas>;\n});\n","import React, { useRef } from \"react\";\nimport HeartBeat, { MODE } from \"../../../components/HeartBeat\";\n\nexport default function Heart() {\n    const heartBeatRef = useRef();\n    const playNormal = () => {\n        heartBeatRef.current.setMode(MODE.NORMAL);\n        heartBeatRef.current.beat();\n    };\n    const playDeath = () => {\n        heartBeatRef.current.setMode(MODE.RIP);\n        heartBeatRef.current.beat();\n    };\n\n    return (\n        <div>\n            <HeartBeat ref={heartBeatRef} />\n            <h1>HeartBeat Demo</h1>\n            <button onClick={playNormal}>play normal</button>\n            <br />\n            <button onClick={playDeath}>play death</button>\n        </div>\n    );\n}\n"],"sourceRoot":""}