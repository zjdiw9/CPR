{"version":3,"sources":["utils/LazyLoad.jsx","Router.jsx","serviceWorker.js","core/index.js","index.js"],"names":["LazyLoad","bundle","fallback","component","useRef","useState","start","setStart","useEffect","current","lazy","createElement","Router","path","Boolean","window","location","hostname","match","document","documentElement","style","fontSize","clientWidth","toFixed","styleSheet","querySelector","sheet","CSSInJS","insertRule","screen","availWidth","availHeight","Core","onresize","reload","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uPAEe,SAASA,EAAT,GAAyC,IAArBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,SACjCC,EAAYC,mBADiC,EAEzBC,oBAAS,GAFgB,mBAE5CC,EAF4C,KAErCC,EAFqC,KASnD,OALAC,qBAAU,WACNL,EAAUM,QAAUC,eAAKT,GACzBM,GAAS,KACV,CAACN,IAGA,kBAAC,WAAD,CAAUC,SAAUA,GAAY,2CAC3BI,EAAQK,wBAAcR,EAAUM,SAAW,MCTzC,SAASG,IACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,SACR,kBAACb,EAAD,CAAUC,OAAQ,kBAAM,kCAE5B,kBAAC,IAAD,CAAOY,KAAK,SACR,kBAACb,EAAD,CAAUC,OAAQ,kBAAM,wDAE5B,kBAAC,IAAD,CAAOY,KAAK,SACR,kBAACb,EAAD,CAAUC,OAAQ,kBAAM,+DAE5B,kBAAC,IAAD,CAAOY,KAAK,UACR,kBAACb,EAAD,CAAUC,OAAQ,kBAAM,wDAE5B,kBAAC,IAAD,CAAOY,KAAK,WACR,kBAACb,EAAD,CAAUC,OAAQ,kBAAM,kCAE5B,kBAAC,IAAD,CAAOY,KAAK,UACR,kBAACb,EAAD,CAAUC,OAAQ,kBAAM,iCAE5B,kBAAC,IAAD,CAAOY,KAAK,eACR,kBAACb,EAAD,CAAUC,OAAQ,kBAAM,iCAE5B,kBAAC,IAAD,CAAOY,KAAK,KACR,kBAACb,EAAD,CAAUC,OAAQ,kBAAM,8EClBxBa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCLFC,SAASC,gBAAgBC,MAAMC,SAA/B,WAA8CH,SAASC,gBAAgBG,YAAc,MAAMC,QAAQ,GAAnG,MAbG,WACH,IACMC,EADYN,SAASO,cAAT,kBACWC,MAC7BF,EAAWG,SAAU,EACrBH,EAAWI,WAAX,4CAEiBd,OAAOe,OAAOC,WAF/B,oCAGkBhB,OAAOe,OAAOE,YAHhC,mBCIJC,GDSIlB,OAAOmB,SAAW,WACdnB,OAAOC,SAASmB,UCPxBC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC1B,EAAD,OAEJO,SAASoB,eAAe,SFoHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.00008731.chunk.js","sourcesContent":["import React, { lazy, Suspense, useState, useEffect, useRef, createElement } from \"react\";\n\nexport default function LazyLoad({ bundle, fallback }) {\n    const component = useRef();\n    const [start, setStart] = useState(false);\n\n    useEffect(() => {\n        component.current = lazy(bundle);\n        setStart(true);\n    }, [bundle]);\n\n    return (\n        <Suspense fallback={fallback || <h1>loading...</h1>}>\n            {start ? createElement(component.current) : null}\n        </Suspense>\n    );\n}\n","import React from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport LazyLoad from \"./utils/LazyLoad\";\n\nexport default function Router() {\n    return (\n        <HashRouter>\n            <Switch>\n                <Route path='/demo'>\n                    <LazyLoad bundle={() => import(\"./app/demo/View/Demo\")} />\n                </Route>\n                <Route path='/golf'>\n                    <LazyLoad bundle={() => import(\"./app/demo/View/Golf\")} />\n                </Route>\n                <Route path='/gltf'>\n                    <LazyLoad bundle={() => import(\"./app/demo/View/GLTF\")} />\n                </Route>\n                <Route path='/heart'>\n                    <LazyLoad bundle={() => import(\"./app/demo/View/Heart\")} />\n                </Route>\n                <Route path='/taptap'>\n                    <LazyLoad bundle={() => import(\"./app/demo/View/TapTap\")} />\n                </Route>\n                <Route path='/modal'>\n                    <LazyLoad bundle={() => import(\"./app/demo/View/Modal\")} />\n                </Route>\n                <Route path='/components'>\n                    <LazyLoad bundle={() => import(\"./app/demo/View/Components\")} />\n                </Route>\n                <Route path='/'>\n                    <LazyLoad bundle={() => import(\"./app/CPR/View\")} />\n                </Route>\n            </Switch>\n        </HashRouter>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export function injectStyle() {\n    const styleElem = document.querySelector(`[alt=\"inject\"]`);\n    const styleSheet = styleElem.sheet;\n    styleSheet.CSSInJS = true;\n    styleSheet.insertRule(\n        `.fullscreen {\n            width: ${window.screen.availWidth}px;\n            height: ${window.screen.availHeight}px;\n        }`\n    );\n}\n\nexport function setRem() {\n    document.documentElement.style.fontSize = `${(document.documentElement.clientWidth / 3.75).toFixed(2)}px`;\n}\n\nexport function bindResize() {\n    window.onresize = () => {\n        window.location.reload();\n    };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.scss\";\nimport Router from \"./Router\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport * as Core from \"./core\";\n\nCore.setRem();\nCore.injectStyle();\nCore.bindResize();\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}